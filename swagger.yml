swagger: "2.0"
info:
  description: "This is the API specification for Alice. It includes product facing endpoints and more hidden ones."
  version: "1.0.0"
  title: "Alice"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/api"
tags:
- name: "hub"
  description: "A raspi remote machine"
- name: "sensor"
  description: "Remote sensor on hubs"
- name: "reading"
  description: "Remote sensor on hubs"
- name: "command"
  description: "Command executed by hub"
- name: "code"
  description: "Control code that issues commands"
schemes:
- "https"
- "http"
paths:
  /users/{userId}/hubs/{hubId}/sensors:
    post:
      tags:
      - "sensor"
      summary: "Add a new sensor"
      description: ""
      operationId: "addSensor"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      - in: "body"
        name: "body"
        description: "{'type': 'humidity'}"
        required: true
        schema:
          $ref: "#/definitions/Sensor"
      - in: "path"
        name: "hubId"
        description: "Hub id"
        required: true
        type: "string"
      responses:
        405:
          description: "Invalid input"
        403:
          description: "Forbidden"
    get:
      tags:
      - "sensor"
      summary: "Finds sensors by hub"
      operationId: "findSensorsByHub"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      - in: "path"
        name: "hubId"
        description: "Hub id"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Sensor"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Forbidden"
        404:
          description: "Hub not found"
  /users/{userId}/hubs/{hubId}/sensors/{id}:
    get:
      tags:
      - "sensor"
      summary: "Finds sensors by id"
      operationId: "findSensorsById"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      - in: "path"
        name: "id"
        description: "Sensor id"
        required: true
        type: "string"
      - in: "path"
        name: "hubId"
        description: "Hub id"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Sensor"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Forbidden"
        404:
          description: "sensor not found"
    put:
      tags:
      - "sensor"
      summary: "Update an existing sensor"
      description: ""
      operationId: "updateSensor"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      - in: "body"
        name: "body"
        description: "{'type': 'humidity'}"
        required: true
        schema:
          $ref: "#/definitions/Sensor"
      - in: "path"
        name: "id"
        type: "string"
        required: true
      - in: "path"
        name: "hubId"
        description: "Hub id"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Sensor"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Forbidden"
        404:
          description: "sensor not found"
    delete:
      tags:
      - "sensor"
      summary: "Delete a sensor"
      description: ""
      operationId: "deleteSensor"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      - in: "path"
        name: "id"
        type: "string"
        required: true
      - in: "path"
        name: "hubId"
        description: "Hub id"
        required: true
        type: "string"
      responses:
        204:
          description: "sensor deleted operation"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Forbidden"
        404:
          description: "Sensor not found"
  /users/{userId}/hubs/{hubId}/sensors/{sensorId}/readings:
    post:
      tags:
      - "reading"
      summary: "Add a sensor reading"
      description: ""
      operationId: "addReading"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      - in: "path"
        name: "sensorId"
        type: "string"
        required: true
      - in: "path"
        name: "hubId"
        description: "Hub id"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "{'action': 'readHumidity','data': 0.1}"
        required: true
        schema:
          $ref: "#/definitions/Reading"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Reading"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Forbidden"
        404:
          description: "Sensor not found"
    get:
      tags:
      - "reading"
      summary: "Get sensor readings"
      description: ""
      operationId: "getReadings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      - in: "path"
        name: "sensorId"
        type: "string"
        required: true
      - in: "path"
        name: "hubId"
        description: "Hub id"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Reading"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Forbidden"
        404:
          description: "Sensor readings not found"
  /users/{userId}/hubs/{hubId}/sensors/{sensorId}/readings/{id}:
    get:
      tags:
      - "reading"
      summary: "Find a sensor reading"
      description: ""
      operationId: "getReading"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      - in: "path"
        name: "id"
        type: "string"
        required: true
      - in: "path"
        name: "hubId"
        description: "Hub id"
        required: true
        type: "string"
      - in: "path"
        name: "sensorId"
        description: "Sensor id"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Reading"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Forbidden"
        404:
          description: "Sensor readings not found"
    put:
      tags:
      - "reading"
      summary: "Update a sensor reading"
      description: ""
      operationId: "updateReading"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      - in: "path"
        name: "id"
        type: "string"
        required: true
      - in: "path"
        name: "hubId"
        description: "Hub id"
        required: true
        type: "string"
      - in: "path"
        name: "sensorId"
        description: "Sensor id"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "{'action': 'readHumidity','data': 0.1}"
        required: true
        schema:
          $ref: "#/definitions/Reading"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Reading"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Forbidden"
        404:
          description: "Sensor readings not found"
    delete:
      tags:
      - "reading"
      summary: "Delete sensor readings"
      description: ""
      operationId: "deleteReadings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      - in: "path"
        name: "id"
        type: "string"
        required: true
      - in: "path"
        name: "hubId"
        description: "Hub id"
        required: true
        type: "string"
      - in: "path"
        name: "sensorId"
        description: "Sensor id"
        required: true
        type: "string"
      responses:
        204:
          description: "code deleted operation"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Forbidden"
        404:
          description: "Sensor reading not found"
  /users/{userId}/hubs/{hubId}/codes:
    post:
      tags:
      - "code"
      summary: "Add a new code"
      description: ""
      operationId: "addCode"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      - in: "body"
        name: "body"
        description: "{'version': '1.0.0', 'commands':[]}"
        required: true
        schema:
          $ref: "#/definitions/Code"
      - in: "path"
        name: "hubId"
        description: "Hub id"
        required: true
        type: "string"
      responses:
        405:
          description: "Invalid input"
        403:
          description: "Forbidden"
    get:
      tags:
      - "code"
      summary: "Finds codes by hub"
      operationId: "findCodesByHub"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      - in: "path"
        name: "hubId"
        description: "Hub id"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Code"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Forbidden"
        404:
          description: "code not found"
  /users/{userId}/hubs/{hubId}/codes/{id}:
    get:
      tags:
      - "code"
      summary: "Finds code by id"
      operationId: "findCodesById"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      - in: "path"
        name: "id"
        description: "Code id"
        required: true
        type: "string"
      - in: "path"
        name: "hubId"
        description: "Hub id"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Code"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Forbidden"
        404:
          description: "code not found"
    put:
      tags:
      - "code"
      summary: "Update an existing code"
      description: ""
      operationId: "updateCode"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      - in: "body"
        name: "body"
        description: "{'version': '1.0.0', 'commands':[]}"
        required: true
        schema:
          $ref: "#/definitions/Code"
      - in: "path"
        name: "id"
        type: "string"
        required: true
      - in: "path"
        name: "hubId"
        description: "Hub id"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Code"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Forbidden"
        404:
          description: "code not found"
    delete:
      tags:
      - "code"
      summary: "Delete a code"
      description: ""
      operationId: "deleteCode"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      - in: "path"
        name: "id"
        type: "string"
        required: true
      - in: "path"
        name: "hubId"
        description: "Hub id"
        required: true
        type: "string"
      responses:
        204:
          description: "code deleted operation"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Forbidden"
        404:
          description: "Code not found"
  /users/{userId}/hubs/{hubId}/codes/{codeId}/commands:
    post:
      tags:
      - "command"
      summary: "Add a control command"
      description: ""
      operationId: "addCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      - in: "path"
        name: "codeId"
        type: "string"
        required: true
      - in: "path"
        name: "hubId"
        description: "Hub id"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "{'action': 'setHumidity', 'data': 0.2}"
        required: true
        schema:
          $ref: "#/definitions/Command"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Command"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Forbidden"
        404:
          description: "Control code not found"
    get:
      tags:
      - "command"
      summary: "Get code commands"
      description: ""
      operationId: "getCommands"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      - in: "path"
        name: "codeId"
        type: "string"
        required: true
      - in: "path"
        name: "hubId"
        description: "Hub id"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Command"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Forbidden"
        404:
          description: "Control code command not found"
  /users/{userId}/hubs/{hubId}/codes/{codeId}/commands/{id}:
    get:
      tags:
      - "command"
      summary: "Find a control command"
      description: ""
      operationId: "getCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      - in: "path"
        name: "id"
        type: "string"
        required: true
      - in: "path"
        name: "hubId"
        description: "Hub id"
        required: true
        type: "string"
      - in: "path"
        name: "codeId"
        description: "Control code id"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Command"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Forbidden"
        404:
          description: "Control code command not found"
    put:
      tags:
      - "command"
      summary: "Update a control command"
      description: ""
      operationId: "updateCommand"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      - in: "path"
        name: "id"
        type: "string"
        required: true
      - in: "path"
        name: "hubId"
        description: "Hub id"
        required: true
        type: "string"
      - in: "path"
        name: "codeId"
        description: "Control code id"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "{'action': 'setHumidity', 'data': 0.2}"
        required: true
        schema:
          $ref: "#/definitions/Command"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Command"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Forbidden"
        404:
          description: "Control code command not found"
    delete:
      tags:
      - "command"
      summary: "Delete code command"
      description: ""
      operationId: "deleteCommands"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      - in: "path"
        name: "id"
        type: "string"
        required: true
      - in: "path"
        name: "hubId"
        description: "Hub id"
        required: true
        type: "string"
      - in: "path"
        name: "codeId"
        description: "Control code id"
        required: true
        type: "string"
      responses:
        204:
          description: "code deleted operation"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Forbidden"
        404:
          description: "Code command not found"
  /users:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "{'username': 'benjithedalilama', 'email': 'benjithedalillama@gmail.com', 'password': 'doodoobrain'}"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /users/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "email"
        in: "query"
        description: "The email for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid email/password supplied"
  /users/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /users/{id}:
    get:
      tags:
      - "user"
      summary: "Get user by id"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid id supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "{'username': 'benjithedalilama', 'email': 'benjithedalillama@gmail.com', 'password': 'doodoobrain'}"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid id supplied"
        404:
          description: "User not found"
  /users/{userId}/hubs:
    post:
      tags:
      - "hub"
      summary: "Add a new hub"
      description: ""
      operationId: "addHub"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      - in: "body"
        name: "body"
        description: "{'name': 'Berlin-2','location': [1.0,1.0]}"
        required: true
        schema:
          $ref: "#/definitions/Hub"
      responses:
        405:
          description: "Invalid input"
        403:
          description: "Forbidden"
    get:
      tags:
      - "hub"
      summary: "Finds Hubs by user id"
      operationId: "findHubsByUserId"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Hub"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Forbidden"
        404:
          description: "Hub not found"
  /users/{userId}/hubs/{id}:
    get:
      tags:
      - "hub"
      summary: "Finds Hubs by id"
      operationId: "findHubsById"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      - in: "path"
        name: "id"
        description: "Hub id"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Hub"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Forbidden"
        404:
          description: "Hub not found"
    put:
      tags:
      - "hub"
      summary: "Update an existing hub"
      description: ""
      operationId: "updateHub"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      - in: "body"
        name: "body"
        description: "{'name': 'Berlin-2','location': [1.0,1.0]}"
        required: true
        schema:
          $ref: "#/definitions/Hub"
      - in: "path"
        name: "id"
        type: "string"
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Hub"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Forbidden"
        404:
          description: "Hub not found"
    delete:
      tags:
      - "hub"
      summary: "Delete a hub"
      description: ""
      operationId: "deleteHub"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        type: "string"
        required: true
        description: "User id"
      - in: "path"
        name: "id"
        type: "string"
        required: true
      responses:
        204:
          description: "Hub deleted operation"
        400:
          description: "Invalid ID supplied"
        403:
          description: "Forbidden"
        404:
          description: "Hub not found"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "string"
      email:
        type: "string"
      hashed_password:
        type: "string"
      hubs:
        type: "array"
        items:
            $ref: "#/definitions/Hub"
  Hub:
    type: "object"
    required:
    - "name"
    - "location"
    properties:
      id:
        type: "string"
      name:
        type: "string"
        example: "doggie"
      location:
        type: "array"
        items:
          type: "number"
      deployed:
        type: "boolean"
      createdAt:
        type: "string"
        format: "date-time"
      sensors:
        type: "array"
        items:
            $ref: "#/definitions/Sensor"
      codes:
        type: "array"
        items:
            $ref: "#/definitions/Code"
  Sensor:
    type: "object"
    properties:
      id:
        type: "string"
      type:
        type: "string"
        enum:
        - "humidity"
        - "temperature"
        - "ammonia"
      createdAt:
        type: "string"
        format: "date-time"
      readings:
        type: "array"
        items:
            $ref: "#/definitions/Reading"
  Reading:
    type: "object"
    properties:
      id:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      action:
        type: "string"
        enum:
        - "readHumidity"
        - "readTemperature"
      data:
        type: "number"
  Code:
    type: "object"
    properties:
      id:
        type: "string"
      version:
        type: "string"
      action:
        type: "string"
        enum:
        - "setHumidity"
        - "setTemperature"
      commands:
        type: "array"
        items:
            $ref: "#/definitions/Command"
  Command:
    type: "object"
    properties:
      id:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      action:
        type: "string"
        enum:
        - "setHumidity"
        - "setTemperature"
      data:
        type: "number"
